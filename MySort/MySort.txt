#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SWAP(a, b) \
  {                \
    a = a ^ b;     \
    b = a ^ b;     \
    a = a ^ b;     \
  }

void printfIn(int input[], int len)
{
  for (int i = 0; i < len; i++)
  {
    printf("%d ", input[i]);
  }
  printf("\n");
}

int pivotkey(int input[], int low, int high)
{
  int mid = low + ((high - low) >> 2);
  if (input[low] > input[high])
  {
    SWAP(input[low], input[high]);
  }
  if (input[mid] > input[high])
  {
    SWAP(input[mid], input[high]);
  }
  if (input[mid] > input[low])
  {
    SWAP(input[mid], input[low]);
  }

  return input[low];
}

/* 冒泡排序*/
void BubbleSort_1(int input[], int low, int high)
{
  for (int i = low; i < high; ++i)
  {
    for (int j = high - 1; j > i; --j)
    {
      if (input[j - 1] > input[j])
      {
        SWAP(input[j - 1], input[j]);
      }
    }
  }
}

/* 改进的冒泡排序*/
void BubbleSort_2(int input[], int low, int high)
{
  int flag = 1;

  for (int i = low; (i < high && flag); ++i)
  {
    flag = 0;
    for (int j = high - 1; j > i; --j)
    {
      if (input[j - 1] > input[j])
      {
        SWAP(input[j - 1], input[j]);
        flag = 1;
      }
    }
  }
}

/* 选择排序 */
void SelectSort(int input[], int low, int high)
{
  for (int i = low; i < high; ++i)
  {
    int MinIndex = i;
    for (int j = i + 1; j < high; ++j)
    {
      if (input[j] < input[MinIndex])
      {
        MinIndex = j;
      }
    }
    if (MinIndex != i)
    {
      SWAP(input[MinIndex], input[i]);
    }
  }
}

/* 插入排序 */
void InsertSort(int input[], int low, int high)
{
  for (int i = low + 1; i < high; ++i)
  {
    if (input[i] < input[i - 1])
    {
      int j = i - 1;
      int temp = input[i];

      for (; (j >= 0) && (input[j] > temp); --j)
      {
        input[j + 1] = input[j];
      }
      input[j + 1] = temp;
    }
  }
}

/* 希尔排序 */
void ShellSort(int input[], int low, int high)
{
  int gap = high;
  do
  {
    gap = gap / 3 + 1;
    for (int i = low + gap; i < high; ++i)
    {
      if (input[i] < input[i - gap])
      {
        int j = i - gap;
        int temp = input[i];
        for (; (j >= 0) && (input[j] > temp); j -= gap)
        {
          input[j + gap] = input[j];
        }
        input[j + gap] = temp;
      }
    }
  } while (gap > 1);
}

/* 快速排序 */
void QuickSort(int input[], int low, int high)
{
  if (low < high)
  {
    int left = low;
    int right = high;
    // int temp = input[left];
    int temp = pivotkey(input, left, right);

    while (left < right)
    {
      while ((left < right) && (input[right] >= temp))
      {
        --right;
      }
      input[left] = input[right];
      while ((left < right) && input[left] < temp)
      {
        ++left;
      }
      input[right] = input[left];
    }
    input[left] = temp;
    QuickSort(input, low, left - 1);
    QuickSort(input, left + 1, high);
  }
}

/* 归并排序 */
void MergeSort(int input[], int low, int high)
{
  if (low < high)
  {
    int mid = low + (high - low) / 2;
    int leftstart = low;
    int leftend = mid;
    int rightstart = mid + 1;
    int rightend = high;

    int des[high + 1];
    int index = low;

    MergeSort(input, leftstart, leftend);
    MergeSort(input, rightstart, rightend);

    while ((leftstart <= leftend) && (rightstart <= rightend))
    {
      if (input[leftstart] < input[rightstart])
      {
        des[index++] = input[leftstart++];
      }
      else
      {
        des[index++] = input[rightstart++];
      }
    }
    while (leftstart <= leftend)
    {
      des[index++] = input[leftstart++];
    }
    while (rightstart <= rightend)
    {
      des[index++] = input[rightstart++];
    }
    memcpy(&(input[0]) + low, &(des[0]) + low, (high - low + 1) * sizeof(int));
  }
}

int main()
{
  int input[] = {9, 1, 5, 8, 3, 7, 4, 6, 2};
  int len = sizeof(input) / sizeof(*input);

  printfIn(input, len);

  // BubbleSort_1(input, 0, len);
  // printfIn(input, len);

  // BubbleSort_2(input, 0, len);
  // printfIn(input, len);

  // SelectSort(input, 0, len);
  // printfIn(input, len);

  // InsertSort(input, 0, len);
  // printfIn(input, len);

  // ShellSort(input, 0, len);
  // printfIn(input, len);

  // QuickSort(input, 0, len - 1);
  // printfIn(input, len);

  MergeSort(input, 0, len - 1);
  printfIn(input, len);

  return 0;
}
